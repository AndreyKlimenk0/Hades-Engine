[1mdiff --git a/data/shader/demo_ps.cso b/data/shader/demo_ps.cso[m
[1mindex ca730eb..3233d32 100644[m
Binary files a/data/shader/demo_ps.cso and b/data/shader/demo_ps.cso differ
[1mdiff --git a/data/shader/demo_vs.cso b/data/shader/demo_vs.cso[m
[1mindex 5e1bc2e..48e6b39 100644[m
Binary files a/data/shader/demo_vs.cso and b/data/shader/demo_vs.cso differ
[1mdiff --git a/data/shader/depth_map_ps.cso b/data/shader/depth_map_ps.cso[m
[1mindex 5b6da06..0c045a6 100644[m
Binary files a/data/shader/depth_map_ps.cso and b/data/shader/depth_map_ps.cso differ
[1mdiff --git a/data/shader/depth_map_vs.cso b/data/shader/depth_map_vs.cso[m
[1mindex e186987..4f469e4 100644[m
Binary files a/data/shader/depth_map_vs.cso and b/data/shader/depth_map_vs.cso differ
[1mdiff --git a/data/shader/draw_lines_ps.cso b/data/shader/draw_lines_ps.cso[m
[1mindex 1473706..64d7188 100644[m
Binary files a/data/shader/draw_lines_ps.cso and b/data/shader/draw_lines_ps.cso differ
[1mdiff --git a/data/shader/draw_lines_vs.cso b/data/shader/draw_lines_vs.cso[m
[1mindex 4f7f4f3..d0a05ca 100644[m
Binary files a/data/shader/draw_lines_vs.cso and b/data/shader/draw_lines_vs.cso differ
[1mdiff --git a/data/shader/draw_text_ps.cso b/data/shader/draw_text_ps.cso[m
[1mindex 36fd67c..f8b1ee9 100644[m
Binary files a/data/shader/draw_text_ps.cso and b/data/shader/draw_text_ps.cso differ
[1mdiff --git a/data/shader/draw_text_vs.cso b/data/shader/draw_text_vs.cso[m
[1mindex 341d02f..0078f07 100644[m
Binary files a/data/shader/draw_text_vs.cso and b/data/shader/draw_text_vs.cso differ
[1mdiff --git a/data/shader/draw_texture_ps.cso b/data/shader/draw_texture_ps.cso[m
[1mindex 2d33447..2dd9caf 100644[m
Binary files a/data/shader/draw_texture_ps.cso and b/data/shader/draw_texture_ps.cso differ
[1mdiff --git a/data/shader/draw_texture_vs.cso b/data/shader/draw_texture_vs.cso[m
[1mindex 82480a0..0c83deb 100644[m
Binary files a/data/shader/draw_texture_vs.cso and b/data/shader/draw_texture_vs.cso differ
[1mdiff --git a/data/shader/forward_light_ps.cso b/data/shader/forward_light_ps.cso[m
[1mindex 299c26c..4e41b5f 100644[m
Binary files a/data/shader/forward_light_ps.cso and b/data/shader/forward_light_ps.cso differ
[1mdiff --git a/data/shader/forward_light_vs.cso b/data/shader/forward_light_vs.cso[m
[1mindex 5ee20fe..8bf578d 100644[m
Binary files a/data/shader/forward_light_vs.cso and b/data/shader/forward_light_vs.cso differ
[1mdiff --git a/data/shader/outlining_ps.cso b/data/shader/outlining_ps.cso[m
[1mindex 548c937..423e9f1 100644[m
Binary files a/data/shader/outlining_ps.cso and b/data/shader/outlining_ps.cso differ
[1mdiff --git a/data/shader/outlining_vs.cso b/data/shader/outlining_vs.cso[m
[1mindex ac25011..b5225de 100644[m
Binary files a/data/shader/outlining_vs.cso and b/data/shader/outlining_vs.cso differ
[1mdiff --git a/data/shader/render_2d_ps.cso b/data/shader/render_2d_ps.cso[m
[1mindex c01acf8..ef772e0 100644[m
Binary files a/data/shader/render_2d_ps.cso and b/data/shader/render_2d_ps.cso differ
[1mdiff --git a/data/shader/render_2d_vs.cso b/data/shader/render_2d_vs.cso[m
[1mindex dbfcfed..6cd6fca 100644[m
Binary files a/data/shader/render_2d_vs.cso and b/data/shader/render_2d_vs.cso differ
[1mdiff --git a/hades.vcxproj b/hades.vcxproj[m
[1mindex 1f85386..93474c1 100644[m
[1m--- a/hades.vcxproj[m
[1m+++ b/hades.vcxproj[m
[36m@@ -163,6 +163,7 @@[m
     <ClCompile Include="src\gui\gui.cpp" />[m
     <ClCompile Include="src\libs\color.cpp" />[m
     <ClCompile Include="src\libs\ds\dict.cpp" />[m
[32m+[m[32m    <ClCompile Include="src\libs\math\common.cpp" />[m
     <ClCompile Include="src\libs\os\camera.cpp" />[m
     <ClCompile Include="src\libs\os\event.cpp" />[m
     <ClCompile Include="src\libs\os\file.cpp" />[m
[1mdiff --git a/hades.vcxproj.filters b/hades.vcxproj.filters[m
[1mindex ad1ea1a..19dfe05 100644[m
[1m--- a/hades.vcxproj.filters[m
[1m+++ b/hades.vcxproj.filters[m
[36m@@ -108,6 +108,9 @@[m
     <ClCompile Include="src\render\render_pass.cpp">[m
       <Filter>Source Files</Filter>[m
     </ClCompile>[m
[32m+[m[32m    <ClCompile Include="src\libs\math\common.cpp">[m
[32m+[m[32m      <Filter>Source Files</Filter>[m
[32m+[m[32m    </ClCompile>[m
   </ItemGroup>[m
   <ItemGroup>[m
     <ClInclude Include="src\win32\win_local.h">[m
[1mdiff --git a/hlsl/cbuffer.hlsl b/hlsl/cbuffer.hlsl[m
[1mindex db1b988..41d147a 100644[m
[1m--- a/hlsl/cbuffer.hlsl[m
[1m+++ b/hlsl/cbuffer.hlsl[m
[36m@@ -10,12 +10,12 @@[m [mcbuffer Render_2D_Info : register(b0) {[m
 cbuffer Frame_Info : register(b1) {[m
 	float4x4 view_matrix;[m
 	float4x4 perspective_matrix;[m
[31m-	float3 camera_position;[m
[31m-	int pad1;[m
[31m-	float3 camera_direction;[m
[31m-	int pad2;[m
[32m+[m	[32mfloat4 camera_position;[m
[32m+[m	[32mfloat4 camera_direction;[m
[32m+[m	[32mfloat near_plane;[m
[32m+[m	[32mfloat far_plane;[m
 	uint light_count;[m
[31m-	float3 pad3;[m
[32m+[m	[32muint pad;[m
 };[m
 [m
 struct Mesh_Instance {[m
[1mdiff --git a/hlsl/depth_map.hlsl b/hlsl/depth_map.hlsl[m
[1mindex c82bbfb..1ad592d 100644[m
[1m--- a/hlsl/depth_map.hlsl[m
[1m+++ b/hlsl/depth_map.hlsl[m
[36m@@ -15,19 +15,29 @@[m [mcbuffer Pass_Data : register(b2) {[m
 	uint pad22;[m
 }[m
 [m
[31m-float4 vs_main(uint vertex_id : SV_VertexID) : SV_POSITION[m
[32m+[m[32mstruct Vertex_Out {[m
[32m+[m	[32mfloat4 screen_position : SV_POSITION;[m
[32m+[m	[32mfloat3 world_position : POSITION; //@Note: May be better pass only z[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mVertex_Out vs_main(uint vertex_id : SV_VertexID)[m
 {[m
 	Mesh_Instance mesh_instance = mesh_instances[mesh_id];[m
 	uint index = unified_indices[mesh_instance.index_offset + vertex_id];[m
 	float3 position = unified_vertices[mesh_instance.vertex_offset + index];[m
 	[m
 	float4x4 world_matrix = transpose(world_matrices[world_matrix_id]);[m
[31m-	float4x4 result = mul(mul(world_matrix, view_matrix), perspective_matrix);[m
[31m-	return mul(float4(position, 1.0f), result);[m
[32m+[m	[32mfloat4x4 wvp_matrix = mul(mul(world_matrix, view_matrix), perspective_matrix);[m
[32m+[m
[32m+[m	[32mVertex_Out vertex_out;[m
[32m+[m	[32mvertex_out.screen_position = mul(float4(position, 1.0f), wvp_matrix);[m
[32m+[m	[32mvertex_out.world_position = mul(float4(position, 1.0f), world_matrix).xyz;[m
[32m+[m	[32mreturn vertex_out;[m
 }[m
 [m
[31m-float4 ps_main(float4 position : SV_POSITION) : SV_TARGET[m
[32m+[m[32mfloat4 ps_main(Vertex_Out vertex_out) : SV_TARGET[m
 {[m
[31m-	return float4(1.0f, 0.0f, 0.0f, 1.0f);[m
[32m+[m	[32mfloat depth_value = vertex_out.world_position.z / abs(far_plane - near_plane);[m
[32m+[m	[32mreturn float4(depth_value, depth_value, depth_value, 1.0f);[m
 }[m
 #endif[m
\ No newline at end of file[m
[1mdiff --git a/hlsl/forward_light.hlsl b/hlsl/forward_light.hlsl[m
[1mindex 4f56815..ae7d51a 100644[m
[1m--- a/hlsl/forward_light.hlsl[m
[1m+++ b/hlsl/forward_light.hlsl[m
[36m@@ -4,9 +4,6 @@[m
 #include "vertex.hlsl"[m
 #include "cbuffer.hlsl"[m
 [m
[31m-[m
[31m-#define MAX_NUMBER_LIGHT_IN_WORLD 255[m
[31m-[m
 #define SPOT_LIGHT_TYPE 0[m
 #define POINT_LIGHT_TYPE 1[m
 #define DIRECTIONAL_LIGHT_TYPE 2[m
[1mdiff --git a/src/game/world.cpp b/src/game/world.cpp[m
[1mindex 905992f..474f88a 100644[m
[1m--- a/src/game/world.cpp[m
[1m+++ b/src/game/world.cpp[m
[36m@@ -42,28 +42,27 @@[m [mEntity_Id Game_World::make_geometry_entity(const Vector3 &position, Geometry_Typ[m
 		print("Game_World::make_geometry_entity: Was passed not existing Geometry Type argument.");[m
 		return Entity_Id();[m
 	}[m
[31m-	geometry_entities.push(geometry_entity);[m
[32m+[m	[32mu32 index = geometry_entities.push(geometry_entity);[m
 	[m
[31m-	return Entity_Id(ENTITY_TYPE_GEOMETRY, geometry_entities.count - 1);[m
[32m+[m	[32mreturn Entity_Id(ENTITY_TYPE_GEOMETRY, index);[m
 }[m
 [m
 #define UPDATE_LIGHT_HASH() light_hash += (u32)light.light_type + 1[m
 [m
[31m-Light *Game_World::make_direction_light(const Vector3 &direction, const Vector3 &color)[m
[32m+[m[32mEntity_Id Game_World::make_direction_light(const Vector3 &direction, const Vector3 &color)[m
 {[m
 	Light light;[m
 	init_entity(&light, ENTITY_TYPE_LIGHT, Vector3(0.0f, 0.0f, 0.0f));[m
 	light.direction = direction;[m
 	light.color = color;[m
 	light.light_type = DIRECTIONAL_LIGHT_TYPE;[m
[31m-	lights.push(light);[m
 [m
 	UPDATE_LIGHT_HASH();[m
 [m
[31m-	return &lights.last_item();[m
[32m+[m	[32mreturn Entity_Id(ENTITY_TYPE_LIGHT, lights.push(light));[m
 }[m
 [m
[31m-Light *Game_World::make_point_light(const Vector3 &position, const Vector3 &color, float range)[m
[32m+[m[32mEntity_Id Game_World::make_point_light(const Vector3 &position, const Vector3 &color, float range)[m
 {[m
 	Light light;[m
 	init_entity(&light, ENTITY_TYPE_LIGHT, position);[m
[36m@@ -74,10 +73,10 @@[m [mLight *Game_World::make_point_light(const Vector3 &position, const Vector3 &colo[m
 [m
 	UPDATE_LIGHT_HASH();[m
 [m
[31m-	return &lights.last_item();[m
[32m+[m	[32mreturn Entity_Id(ENTITY_TYPE_LIGHT, lights.push(light));[m
 }[m
 [m
[31m-Light  *Game_World::make_spot_light(const Vector3 &position, const Vector3 &direction, const Vector3 &color, float radius)[m
[32m+[m[32mEntity_Id Game_World::make_spot_light(const Vector3 &position, const Vector3 &direction, const Vector3 &color, float radius)[m
 {[m
 	Light light;[m
 	init_entity(&light, ENTITY_TYPE_LIGHT, position);[m
[36m@@ -89,7 +88,7 @@[m [mLight  *Game_World::make_spot_light(const Vector3 &position, const Vector3 &dire[m
 [m
 	UPDATE_LIGHT_HASH();[m
 [m
[31m-	return &lights.last_item();[m
[32m+[m	[32mreturn Entity_Id(ENTITY_TYPE_LIGHT, lights.push(light));[m
 }[m
 [m
 void Game_World::init()[m
[1mdiff --git a/src/game/world.h b/src/game/world.h[m
[1mindex ac8e928..ef7eb39 100644[m
[1m--- a/src/game/world.h[m
[1m+++ b/src/game/world.h[m
[36m@@ -110,9 +110,9 @@[m [mstruct Game_World {[m
 [m
 	Entity_Id make_geometry_entity(const Vector3 &position, Geometry_Type geometry_type, void *data);[m
 	[m
[31m-	Light  *make_spot_light(const Vector3 &position, const Vector3 &diretion, const Vector3 &color, float radius);[m
[31m-	Light  *make_point_light(const Vector3 &position, const Vector3 &color, float range);[m
[31m-	Light  *make_direction_light(const Vector3 &direction, const Vector3 &color);[m
[32m+[m	[32mEntity_Id make_spot_light(const Vector3 &position, const Vector3 &diretion, const Vector3 &color, float radius);[m
[32m+[m	[32mEntity_Id make_point_light(const Vector3 &position, const Vector3 &color, float range);[m
[32m+[m	[32mEntity_Id make_direction_light(const Vector3 &direction, const Vector3 &color);[m
 [m
 };[m
 #endif[m
\ No newline at end of file[m
[1mdiff --git a/src/libs/fbx_loader.cpp b/src/libs/fbx_loader.cpp[m
[1mindex 0b7b6b5..00661e3 100644[m
[1m--- a/src/libs/fbx_loader.cpp[m
[1m+++ b/src/libs/fbx_loader.cpp[m
[36m@@ -131,15 +131,15 @@[m [mstatic String fbx_file_name;[m
 //					FbxLayeredTexture* layered_texture = FbxCast<FbxLayeredTexture>(prop.GetSrcObject<FbxLayeredTexture>(j));[m
 //					int lcount = layered_texture->GetSrcObjectCount<FbxTexture>();[m
 //					for (int k = 0; k < lcount; k++) {[m
[31m-//						FbxTexture* gpu_resource = FbxCast<FbxTexture>(layered_texture->GetSrcObject<FbxTexture>(k));[m
[31m-//						return gpu_resource;[m
[32m+[m[32m//						FbxTexture* resource = FbxCast<FbxTexture>(layered_texture->GetSrcObject<FbxTexture>(k));[m
[32m+[m[32m//						return resource;[m
 //					}[m
 //				}[m
 //			} else {[m
 //				int texture_count = prop.GetSrcObjectCount<FbxTexture>();[m
 //				for (int j = 0; j < texture_count; j++) {[m
[31m-//					FbxTexture* gpu_resource = FbxCast<FbxTexture>(prop.GetSrcObject<FbxTexture>(j));[m
[31m-//					return gpu_resource;[m
[32m+[m[32m//					FbxTexture* resource = FbxCast<FbxTexture>(prop.GetSrcObject<FbxTexture>(j));[m
[32m+[m[32m//					return resource;[m
 //				}[m
 //			}[m
 //		}[m
[36m@@ -175,13 +175,13 @@[m [mstatic String fbx_file_name;[m
 //[m
 //bool get_texture_file_name(FbxNode *mesh_node, const char *texture_type, String *file_name)[m
 //{[m
[31m-//	FbxTexture *gpu_resource = find_texture(mesh_node, texture_type);[m
[31m-//	if (!gpu_resource) {[m
[32m+[m[32m//	FbxTexture *resource = find_texture(mesh_node, texture_type);[m
[32m+[m[32m//	if (!resource) {[m
 //		print("FbxTexture of type {} was not found in the file", texture_type, fbx_file_name);[m
 //		return false;[m
 //	}[m
 //[m
[31m-//	FbxFileTexture *file_texture = FbxCast<FbxFileTexture>(gpu_resource);[m
[32m+[m[32m//	FbxFileTexture *file_texture = FbxCast<FbxFileTexture>(resource);[m
 //	String file_texture_name = file_texture->GetRelativeFileName();[m
 //[m
 //	Array<String> buffer;[m
[1mdiff --git a/src/libs/math/common.h b/src/libs/math/common.h[m
[1mindex 7719bd6..322d020 100644[m
[1m--- a/src/libs/math/common.h[m
[1m+++ b/src/libs/math/common.h[m
[36m@@ -1,13 +1,16 @@[m
 #ifndef COMMON_MATH_H[m
 #define COMMON_MATH_H[m
 [m
[31m-#include <assert.h>[m
 #include <math.h>[m
[32m+[m[32m#include <assert.h>[m
[32m+[m[32m#include "../ds/array.h"[m
 #include "../../win32/win_types.h"[m
 [m
[32m+[m
 const float PI = 3.1415926535f;[m
 const float RADIANS_360 = 6.28319f;[m
 [m
[32m+[m
 inline s32 radians_to_degrees(float radians)[m
 {[m
 	return (s32)(radians * (180.0f / PI));[m
[36m@@ -269,4 +272,6 @@[m [mtypedef Rect<u32> Rect_u32;[m
 typedef Rect<s32> Rect_s32;[m
 typedef Rect<float> Rect_f32;[m
 [m
[32m+[m[32mvoid pack_rects_in_rect(Rect_u32 *main_rect, Array<Rect_u32 *> *rects);[m
[32m+[m
 #endif[m
[1mdiff --git a/src/render/hlsl.h b/src/render/hlsl.h[m
[1mindex 9598df2..6300e16 100644[m
[1m--- a/src/render/hlsl.h[m
[1m+++ b/src/render/hlsl.h[m
[36m@@ -4,15 +4,16 @@[m
 #include "../libs/math/vector.h"[m
 #include "../libs/math/matrix.h"[m
 [m
[32m+[m
 struct Frame_Info {[m
 	Matrix4 view_matrix;[m
 	Matrix4 perspective_matrix;[m
[31m-	Vector3 camera_position;[m
[31m-	int pad1;[m
[31m-	Vector3 camera_direction;[m
[31m-	int pad2;[m
[32m+[m	[32mVector4 camera_position;[m
[32m+[m	[32mVector4 camera_direction;[m
[32m+[m	[32mfloat near_plane;[m
[32m+[m	[32mfloat far_plane;[m
 	u32 light_count;[m
[31m-	Vector3 pad3;[m
[32m+[m	[32mu32 pad;[m
 };[m
 [m
 [m
[1mdiff --git a/src/render/render_api.cpp b/src/render/render_api.cpp[m
[1mindex d61d1be..92fcac5 100644[m
[1m--- a/src/render/render_api.cpp[m
[1m+++ b/src/render/render_api.cpp[m
[36m@@ -360,7 +360,7 @@[m [mvoid Gpu_Buffer::free()[m
 {[m
 	data_size = 0;[m
 	data_count = 0;[m
[31m-	gpu_resource.Reset();[m
[32m+[m	[32mresource.Reset();[m
 }[m
 [m
 u32 Gpu_Buffer::get_data_width()[m
[36m@@ -394,9 +394,9 @@[m [mvoid Gpu_Device::create_gpu_buffer(Gpu_Buffer_Desc *desc, Gpu_Buffer *buffer)[m
 		D3D11_SUBRESOURCE_DATA resource_data_desc;[m
 		ZeroMemory(&resource_data_desc, sizeof(D3D11_SUBRESOURCE_DATA));[m
 		resource_data_desc.pSysMem = (void *)desc->data;[m
[31m-		HR(device->CreateBuffer(&buffer_desc, &resource_data_desc, buffer->gpu_resource.ReleaseAndGetAddressOf()));[m
[32m+[m		[32mHR(device->CreateBuffer(&buffer_desc, &resource_data_desc, buffer->resource.ReleaseAndGetAddressOf()));[m
 	} else {[m
[31m-		HR(device->CreateBuffer(&buffer_desc, NULL, buffer->gpu_resource.ReleaseAndGetAddressOf()));[m
[32m+[m		[32mHR(device->CreateBuffer(&buffer_desc, NULL, buffer->resource.ReleaseAndGetAddressOf()));[m
 	}[m
 }[m
 [m
[36m@@ -464,9 +464,9 @@[m [mvoid Gpu_Device::create_texture_2d(Texture_Desc *texture_desc, Texture2D *textur[m
 		subresource_desc.pSysMem = texture_desc->data;[m
 		subresource_desc.SysMemPitch = texture_desc->width * texture->format_size;[m
 [m
[31m-		HR(device->CreateTexture2D(&texture_2d_desc, &subresource_desc, texture->gpu_resource.ReleaseAndGetAddressOf()));[m
[32m+[m		[32mHR(device->CreateTexture2D(&texture_2d_desc, &subresource_desc, texture->resource.ReleaseAndGetAddressOf()));[m
 	} else {[m
[31m-		HR(device->CreateTexture2D(&tex